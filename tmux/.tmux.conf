# General Settings   # {{{
# NOTE: "set -g" denotes a global value

# Set <prefix> r to source the .tmux.conf
bind-key r source-file ~/.tmux.conf \; display-message "tmux-conf was sourced, hooray!"

# bind C-k clear-history; display-message "history successfully cleared" # clears scrollback history
# in tmux

# Supposedly, in order to get tmux to launch will full 256color support, you've gotta use:
#   $ tmux -2
# However, in practice, I've found that with everything configured properly, tmux will show
# 256-colors with just `$ tmux`

# To quit tmux, use one of the following
#   tmux kill-session
#   tmux kill-session [-t session_name]
#   tmux kill-server
#   kill -9 1799 # Or whatever the session id is

# On keybindings, using prefix -r allows the keypress to be repeated without having to reuse the
# tmux prefix keypress
# The default repeat-time for keypresses is 500 milliseconds

# Color settings {{{
# NOTE: The only one that seems to work consistently is 'xterm'. For some reason though, the
# coloring still seems to be just the slightest bit off when compared against the same vim file
# launched outside of tmux...
# UPDATE: https://github.com/tmux/tmux/issues/696 , specifically b-gran's reply on Jan 25
# Okay so it seems I finally my have gotten this sorted out... Evidently part of the issue involves
# correctly identifying the terminal environment that is actually being used by tmux. In order to do
# that, start tmux and run:

#   `:echo &TERM`

# Then go back into your .tmux.conf and make sure the default-terminal setting matches what was
# shown. However, there was another step I had not seeen before, and it was to add a set-option
# argument to override the terminal setting. I'm not entirely sure what it does, I just know that it
# did seem to fix the issue
#
# set -g default-terminal "xterm"
set -g default-terminal "xterm-256color"
# set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

# https://github.com/tmux/tmux/issues/1246
  # NOTE: This doesn't work for me
# set -g default-terminal "tmux-256color"
# set -ga terminal-overrides ",*256col*:Tc"

# }}}

# Prefix {{{
# This is the default prefix keybinding
# set -g prefix C-b

# Unbind default prefix
unbind C-b

# Set prefix keybinding
set -g prefix C-a
bind-key 'C-a' send-prefix
  # If you need C-a as another command, press it twice and it will fire "outside" of prefix mode

# Time window prefix remains active after keypress. Default 500 ms
set-option -g repeat-time 750

# }}}

# Renumber windows sequentially after closing any of them
set -g renumber-windows on

# Shorten escape time delay, making tmux more responsive
set -sg escape-time 1

# Start panes at 1, instead of default 0
setw -g pane-base-index 1

# Window and Pane Keybinds {{{
bind-key \\ split-window -h -c "#{pane_current_path}" # create horizontally stacked pane
bind-key - split-window -v -c "#{pane_current_path}" # create vertically stacked pane

bind -r c-h select-pane -L
bind -r c-j select-pane -D
bind -r c-k select-pane -U
bind -r c-l select-pane -R

bind -r h select-window -t :-
bind -r l select-window -t :+

bind -r L resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -R 5

# }}}

# Scrolling settings{{{
# NOTE: To enter into scrolling mode, use <prefix> [  Then, from there, you can use hjkl CTRL+F/B to
# move around. q to exit
# Set Shift+PageUp/PageDown to scroll
# bind -n S-Pageup copy-mode -u
# bind-key -t root -n S-PPage copy-mode u # should automatically enter into copy mode without
# default prefix command
# bind-key -t vi-copy -n S-PPage halfpage-up
# bind-key -t vi-copy -n S-NPage halfpage-down
#
# Should allow hjkl CTRL+D/U when in tmux scroll mode
# set -g status-keys vi
# bind-key -t vi-edit Up history-up
# bind-key -t vi-edit Down history-down

# }}}

# Disable mouse inputs {{{
  # NOTE: this currently notifies these are invalid options
# setw -g mode-mouse off
# set -g mouse-select-pane off
# set -g mouse-resize-pane off
# set -g mouse-select-window off

# }}}

# Change the color of window and pane bars and dividers based on focus {{{
# setw -g window-status-fg cyan
# set -g pane-border-bg colour233
# set -g pane-active-border-fg white
# set -g pane-active-border-bg blue

# setw -g window-status-style fg=cyan
setw -g status-style fg=cyan
set -g pane-border-style bg=colour233
# home/linux/.tmux.conf:132: usage: set-option [-aFgopqsuw] [-t target-pane] option [value] 
# https://man.openbsd.org/tmux.1#STYLES
# set -g -t pane-active-border-style 'bg=blue fg=white'
set -g pane-active-border-style 'bg=blue fg=white'

# }}}

# Enable UTF-8 character support throughout tmux
# (notifies these are invalid options)
set -gq utf8 on
set -gq status-utf8 on

# Scrollback
set -g history-limit 750
  # Originally set much higher until I learned that it can quickly chew up a ton of memory,
  # especially with multiple terminals up and running

# Message display in milliseconds
# set -g display-time 4000
set -g display-time 1500

# Pane number display in milliseconds
set -g display-panes-time 4000

# Focus events
set -g focus-events on

# Display pane title bars
set -g pane-border-status top
# Supposedly you can customize the pane title with something like this...
set -g pane-border-format "#[bold]#{pane_index} #{pane_current_command}"

# For grouped sessions and multimonitor setups
# setw -g aggressive-resize on

# Highlight window listed in status bar when there is activity
setw -g monitor-activity on
set -g visual-activity on

# Enable vim movement keys for moving the cursor through buffers with hjkl, as well as CTRL+F/B for
# page movements
setw -g mode-keys vi

# Remap copy and paste keys to resemble those used in vim
unbind p
bind p paste-buffer
# bind -t vi-copy 'v' begin-selection
# bind -t vi-copy 'y' copy-selection
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection

# }}}

# Sessions  {{{
  # Checkout out https://github.com/tmux-python/tmuxp

# }}}

# Status Bar  # {{{
set -g status on

# Parts and pieces of the staus bar explained:
  #H hostname
  #h hostname without domain name
  #F current window flag
  #I current window index
  #P current pane index
  #S current session name
  #T current window title
  #W current window name
  ## a literal #
  #(shell-command) First line of the shell command's output
  #[attributes] Color of attribute change

set -g status-bg black
set -g status-fg white

# alignment settings
# set-option -g status-justify centre

# status left options
# set-option -g status-left '#[bg=black,fg=green][#[bg=black,fg=cyan]#S#[fg=green]]'
set-option -g status-left ''
# set-option -g status-left '#{sysstat_cpu} | #{sysstat_mem}'
# set-option -g status-left-length 50

# window list options
set -g base-index 1 # start window numbering at 1 instead of default 0
set-window-option -g automatic-rename off
set-window-option -g allow-rename off
set-window-option -g window-status-format '#[fg=cyan,dim]#I#[fg=blue]:#[default]#W#[fg=grey,dim]#F'
set-window-option -g window-status-current-format '#[bg=blue,fg=cyan,bold]#I#[bg=blue,fg=cyan]:#[fg=colour230]#W#[fg=dim]#F'

# status right options
set-option -g status-right-length 50
# set -g status-right '#[fg=green][#[fg=blue]%Y-%m-%d #[fg=white]%H:%M#[default]]'
# set -g status-right '#{prefix_highlight} #[fg=green][#[fg=cyan]%Y-%m-%d #[fg=white]%H:%M#[default]#[fg=green]]'
# set -g status-right '#{prefix_highlight} #{online_status} #[fg=green][#[fg=cyan]%Y-%m-%d #[fg=white]%H:%M#[default]#[fg=green]]'
set -g status-right "#{prefix_highlight} #[fg=green][#[fg=cyan]%Y-%m-%d #[fg=white]%H:%M#[default]#[fg=green]]"

# }}}

# Tmux Plugin Manager   # {{{
# NOTE: It seems the plugins need to be listed at the END of this file. Whenever I tried moving them
# to the top of the file, some of the settings didn't seem to take, like the prefix_highlight colors
# quit working for example...
# $ git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#
# <prefix> I # install plugins
# <prefix> U # update plugins
# <prefix> alt+u # uninstall unlisted plugins

  # Auto install TPM {{{
  # Automatically installs TPM and plugins when initially launching tmux
  # NOTE: The catch seems to be that the ~/.tmux/plugins (or maybe even the entire .tmux directory
  # itself?) needs to be created locally, not pulled in as part of Stow. The only thing Stow should
  # pull in is the .tmux.conf file that is stored in the ~ directory.

  # automatically install and setup tmux-plugin-manager when tmux is started
  if "test ! -d ~/.tmux/plugins/tpm" \
    "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

  # Initialize plugin manager, this should always come after the plugins are listed
  run '~/.tmux/plugins/tpm/tpm'

  # }}}

# Plugin list  # {{{

  # Color Themes {{{
    # set -g @plugin 'arcticicestudio/nord-tmux'
    # set -g @plugin 'jimeh/tmux-themepack' # a pack of really nice looking tmux themes, configure
    # in plugin settings below
      # https://github.com/jimeh/tmux-themepack
    # set -g @plugin 'odedlaz/tmux-onedark-theme'
      # NOTE: It also styles the status bar to look like powerline. Which is fine, except it uses
      # a different syntax for customizing things, which means things like the prefix-highlight are
      # not positioned in the same place and it doesn't use the yellow-orangey color you set it up
      # to use.

  # }}}

# set -g @plugin '8ware/task-dashboard' # basic taskwarrior integration with tmux
  # https://github.com/8ware/task-dashboard
  # NOTE: I suspect the included layout file may require something like the tmux-layout plugin in
  # order to load it properly
  # NOTE: Git complains of it requiring a submodule setup, not something I want to mess with right
  # now
set -g @plugin 'christoomey/vim-tmux-navigator'
  # blends vim pane switching with tmux's window switching
  # NOTE: Use in conjuction with vim plugin of the same name
# set -g @plugin 'fmount/tmux-layout' # save and load custom layouts that can be used on the fly
  # NOTE: Git complains of it requiring a submodule setup, not something I want to mess with right
  # now
# set -g @plugin 'Morantron/tmux-fingers' # vim-easymotion like letter references for copying text
# set -g @plugin 'roosta/tmux-pop' # adds a quick flash of color when changing tmux panes/windows
  # NOTE: Given most of my time in tmux revolves around vim and since the barebones version of
  # lubuntu that I run does not support transparent backgrounds, the "flash" this plugin adds
  # largely goes unutilized. This is because the plugin flashes the terminal window itself and yet,
  # at the same time, vim also seeks to control the background color too (and wins out!). The only
  # way, therefore, to have this plugin work with vim is to be on a distro that supports transparent
  # backgrounds AND use a colorscheme/vim-settings that supports transparent background colors so
  # the "flash" can show through.
# set -g @plugin 'samoshkin/tmux-plugin-sysstat' # adds system stats options for status bar
# set -g @plugin 'tmux-plugins/tmux-continuum'
  # Haven't used since I transitioned to tmuxp for session management. I don't recall how this
  # differs from tmux-resurrect. Maybe they do the same thing? From what I can from the repo, they
  # don't seem to rely on each other in any way. Reading about them on the web, however, it does
  # seem that users tend to use BOTH at the same time, which makes me wonder if they are sister
  # plugins that form some sort of dynamic duo.
# set -g @plugin 'tmux-plugins/tmux-online-status' # displays online status in statusbar
set -g @plugin 'tmux-plugins/tmux-open'
  # open highlighted file or url with 'o' while in tmux copy mode ie <prefix> [ o
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
  # adds a notification when the prefix is pressed on the statusbar
# set -g @plugin 'tmux-plugins/tmux-resurrect'
  # NOTE: See notes on continuum plugin as well, I'm not entirely sure how these two are related...
  # If I had to guess, just going off of the names, it's that continuum adds a sort of
  # "automatically run resurrect in the background" ability
  # NOTE: Got tired of resurrect consistently fubaring the .last file with a "blank" layout. Avoid
  # by manual save/restore?
  # https://github.com/tmux-plugins/tmux-resurrect/issues/287
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/vim-tmux'
# set -g @plugin 'x4121/tmux-slack-counter' # displays slack notification summaries
  # https://github.com/x4121/tmux-slack-counter#usage
  # $ sudo apt install jq
  # You must also request a Slack token. Request submitted: 20181612

# }}}

# Plugin settings {{{
  # Continuum   # {{{
    # set -g @continuum-restore 'on'
    # set -g @continuum-save-interval '0' # in minutes. Set to zero to disable
    # set -g @continuum-boot 'on' # auto-start tmux on system start
      # NOTE: Per the documentation, this only currently works with Mac OS

  # }}}

  # Resurrect  # {{{
    # <prefix> ctrl-s # save
    # <prefix> ctrl-r # restore
    #
    # Default layout save path is ~/.tmux/resurrect. To change, edit next line
    set-option -g @resurrect-dir '$HOME/.tmux-resurrect'
    # set -g @resurrect-capture-pane-contents 'on'
    #
    # List of additional process commands to restore
    # defaults: vi vim nvim emacs man less more tail top htop irssi weechat mutt
    # NOTE: The problem with most of these extra commands is they are not called up properly. For
    # example, vtop is ran through some sort of nodejs call which invalidates the seti theme I have
    # setup in my dotfiles. Meanwhile, killing tmux with the server running does not first <C-c> the
    # server pane, which  prevents it from starting when firing up tmux again. And the rails c stuff
    # just flat out doesn't work. I'm sure I could find out how to customize it and get the
    # funcionality that I'm after, but at this point I dont' want to mess with it.
    # It sounds like, in order to get it straightened out, just go through and set up your windows
    # and panes manually with all of the commands you want it to start with active and running. Then
    # save the environment with <prefix><C-s> and then open the last file itself to see how the
    # commands are structured. Then you'll need to come back into here and set up these commands so
    # that they mirror them appropriately.
    #
    # set -g @resurrect-processes '"~rails s"'
    # set -g @resurrect-processes '"~rails c~>rails c"'
    # set -g @resurrect-processes '"~rails c --sandbox~>rails c --sandbox"'
    # set -g @resurrect-processes '"~bundle exec guard~>bundle exec guard"'
    # set -g @resurrect-processes '"vtop~>vtop"'
    # set -g @resurrect-processes '"imwheel~>imwheel"'
    #
    # set -g @resurrect-processes '"~rails s"'
    # set -g @resurrect-processes '"~rails c"'
    # set -g @resurrect-processes '"~rails c --sandbox"'
    # set -g @resurrect-processes '"~bundle exec guard"'
    # set -g @resurrect-processes '"~vtop -t seti"'

  # }}}

  # online-status{{{
    set -g @online_icon "Online"
    set -g @offline_icon "Offline"

  # }}}

  # prefix_highlight# {{{
    # add the following to your tmux statusline
      #{prefix_highlight}

    set -g @prefix_highlight_fg 'black' # default 'colour231'
    set -g @prefix_highlight_bg 'yellow' # default 'colour05'

    # set -g @prefix_highlight_empty_prompt 'testing'

  # }}}

  # pop  {{{
    # black, red, green, yellow, blue, magenta, cyan, white + 'bright' variants, default brightblack
    set -g @tmux-pop-color 'brightblack'

  # }}}

  # sysstat # {{{
    set -g status-interval 5

    # Change color output depending on hitting certain default thresholds
    # NOTE: Having a hard time getting this to work properly. For example, once the stress_level
    # color is hit, I notice it never goes back to normal once the levels lower. Plus, the red
    # background is applied to the entire 'block' not to the individual percentage number
    # set -g @sysstat_cpu_view_tmp1 '#[fg=#{cpu.color3}]CPU:#[default] #[fg=#{cpu.color},bg=#{cpu.color2}]#{cpu.pused}#[default]'
    #
    # set -g @sysstat_cpu_color_low "$color_level_ok default default"
    # set -g @sysstat_cpu_color_medium "$color_level_warn default default"
    # set -g @sysstat_cpu_color_stress "white,bold $color_level_stress $color_level_stress"

  # }}}

  # slack-counter  {{{
  set -g @slack_update_delay '60 seconds'

  # }}}

  # tmux-fingers {{{
  # <prefix> F # kick-off the initial overlay
  #   a-z # copies
  #   CTRL + a-z # copies then triggers ctrl-action, default is :open in browser
  #   SHIFT + a-z # copies then triggers shift-action, default is :paste

  # }}}

  # tmux-themepack {{{
    # UPDATE: The author has since updated the way he structures the themes. As of 20200320, this is
    # how I added the prefix-highlight to the powerline/default/cyan theme
    #   * navigate and open the theme's file /home/linux/.tmux/plugins/tmux-themepack/powerline/default/cyan.tmuxtheme
    #   * around line 121-ish it has a section titled "Customize prefixes and suffixes for theme"
    #   * edit in the following:
    #     set -goq @theme-status-right-prefix "#{prefix_highlight}"
    #   * restart tmux and BOOM! you should be good to go

    # UPDATE 2: This actually depends on what version you were using. The above works for an "older"
    # version of the plugin. In an as-yet-to-be-merged-and-released-to-master version, it's included
    # a bit differently. If you're using that version, here's what he recommends:

    #   For the prefix key indicator, set @themepack-prefix-key-on-format and
    #   @themepack-prefix-key-off-format options. The off format must be the same length as the on
    #   format to avoid weird behavior.

    # set -g @themepack 'powerline/default/cyan'
    set -g @themepack 'default'
    # set -g @themepack 'basic'

  # }}}

  # vim-tmux-navigator  {{{
  # bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
  # bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
  # bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
  # bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
  # bind -n C-\ run "(tmux display-message -p '#{pane_current_command}'

  is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
  bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
  bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
  bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
  bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
  tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
  if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
      "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
  if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
      "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

  bind-key -T copy-mode-vi 'C-h' select-pane -L
  bind-key -T copy-mode-vi 'C-j' select-pane -D
  bind-key -T copy-mode-vi 'C-k' select-pane -U
  bind-key -T copy-mode-vi 'C-l' select-pane -R
  bind-key -T copy-mode-vi 'C-\' select-pane -l

  # }}}

# }}}

# }}}

# NOTE: There are some interesting things you can do with having sessions be automatically created
# and then logging into them when you start tmux. These session related configs are typically placed
# at the bottom of the .tmux.conf file. With something like `$ tmux new -t main`, as in this example
# shown below. I'm not entirely sure though what advantages that brings to the table... If you want
# to give this a shot, uncomment the below and start tmux with the session explicitly named as
# "main".
# new-session -s main
